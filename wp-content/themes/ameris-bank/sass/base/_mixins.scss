// @file
// Custom sass mixins
//
// Define the custom mixins for your project here.
// http://sass-lang.com/docs/yardoc/file.SASS_REFERENCE.html#defining_a_mixin

// Makes an element visually hidden, but accessible.
// @see http://snook.ca/archives/html_and_css/hiding-content-for-accessibility
@mixin element-invisible {
  position: absolute !important;
  height: 1px;
  width: 1px;
  overflow: hidden;
  clip: rect(1px, 1px, 1px, 1px);
}

// Turns off the element-invisible effect.
@mixin element-invisible-off {
  position: static !important;
  clip: auto;
  height: auto;
  width: auto;
  overflow: auto;
}

// Makes an element visually hidden by default, but visible when focused.
@mixin element-focusable {
  @include element-invisible;

  &:active,
  &:focus {
    @include element-invisible-off;
  }
}


//Rem Fallback
@function strip-unit($num) {
  @return $num / ($num * 0 + 1);
}

@mixin rem-fallback($property, $values...) {
  $max: length($values);
  $pxValues: '';
  $remValues: '';

  @for $i from 1 through $max {
    $value: strip-unit(nth($values, $i));
    $pxValues: #{$pxValues + $value*strip-unit($base-font-size)}px;

    @if $i < $max {
      $pxValues: #{$pxValues + " "};
    }
  }

  @for $i from 1 through $max {
    $value: strip-unit(nth($values, $i));
    $remValues: #{$remValues + $value}rem;

    @if $i < $max {
      $remValues: #{$remValues + " "};
    }
  }

  #{$property}: $pxValues;
  #{$property}: $remValues;
}


/*
 * Retina Sprites for Compass
 * by:              Andreas Sahle
 * forked from:     Retina-Sprites-for-Compass by Gaya Kessler
 * @see: https://github.com/Gaya/Retina-Sprites-for-Compass
 * last update:     04/13/14
 *
 * NOTE: This is a fork of the fork.
 *
 * Usage:
 * 1. create a folder in your image directory (in this case 'sprite-images').
 * 2. create sprite images for pixel ratio 1 screens and put them in the folder.
 * 4. create sprite images for pixel ratio 2 screens and put them in the folder,
 *    use the same filenames with a '-2x' suffix.
 * 5. use the sprite-image in your Sass/Scss using: '@include use-sprite(<sprite-name>)'
 */

//first we'll define the folder where the sprites are and their layout
$sprite-images: sprite-map("sprite-images/*.png", $layout: vertical, $spacing: 10px) !default;
$sprite-high-res-suffix: '-2x' !default;


//Sprite mixin, works perfectly with standard defines
@mixin use-sprite($sprite, $sprite-retina: true, $sprite-map: $sprite-images) {
  $sprite-high-res: #{$sprite}#{$sprite-high-res-suffix};
  background-image: sprite-url($sprite-map);
  background-position: sprite-position($sprite-map, $sprite);
  background-repeat: no-repeat;
  overflow: hidden;
  height: image-height(sprite-file($sprite-map, $sprite));
  width: image-width(sprite-file($sprite-map, $sprite));

  @if $sprite-retina {
    @media (-webkit-min-device-pixel-ratio: 2), (-o-min-device-pixel-ratio: 3/2), (min--moz-device-pixel-ratio: 2), (min-device-pixel-ratio: 2), (min-resolution: 144dppx) {
      background-size: (image-width(sprite-path($sprite-map)) / 2) (image-height(sprite-path($sprite-map)) / 2);
      background-position: nth(sprite-position($sprite-map, $sprite-high-res), 1)/2 nth(sprite-position($sprite-map, $sprite-high-res), 2)/2;
      height: image-height(sprite-file($sprite-map, $sprite));
      width: image-width(sprite-file($sprite-map, $sprite));
    }
  }

}

//Simplified version of use-sprite mixin specifically for IE8 (IE8 breaks when there is both a pixel density and screen size media query)
@mixin use-sprite-ie8($sprite, $sprite-retina: false, $sprite-map: $sprite-images) {
  $sprite-high-res: #{$sprite}#{$sprite-high-res-suffix};
  background-image: sprite-url($sprite-map);
  background-position: sprite-position($sprite-map, $sprite);
  background-repeat: no-repeat;
  overflow: hidden;
  height: image-height(sprite-file($sprite-map, $sprite));
  width: image-width(sprite-file($sprite-map, $sprite));
}

//Preferred version of clearfix
@mixin clearfix(){
  &:after{
    content: "";
    display: table;
    clear: both;
  }
}

// Center block
@mixin center-block {
  display: block;
  margin-left: auto;
  margin-right: auto;
}

@mixin red-button {
  background-color: $red;
  color: $white;
  @include rem-fallback(padding, 1, 2);
  @include border-radius(5px);
  font-family: $font-sansserif;
  box-shadow: 0 .5rem rgba(21,57,127,.2);
  transition: background-color .2s, box-shadow .2s;

  &:hover, &:active, &:focus {
    background-color: shade($red, 15%);
    box-shadow: 0 .7rem rgba(21,57,127,.2);
  }

  &:focus {
    text-decoration: underline;
  }

  &:hover, &:visited, &:focus {
    color: $white;
  }
}

@mixin blue-button {
  background-color: $darkblue;
  color: $white;
  @include rem-fallback(padding, 1, 2);
  @include border-radius(5px);
  font-family: $font-sansserif;
  box-shadow: 0 .5rem rgba(21,57,127,.2);
  transition: background-color .2s, box-shadow .2s;
  
  &:hover, &:active, &:focus {
    background-color: $lightblue;
    box-shadow: 0 .7rem rgba(21,57,127,.2);
  }

  &:focus {
    text-decoration: underline;
  }
  
  &:hover, &:visited, &:focus {
    color: $white;
  }
  
}

@mixin red-button-cta {
  @include red-button;
  @include rem-fallback(padding, 1.7, 3, 2);
  @include rem-fallback(font-size, 2.1);
  font-weight: 300;
  clear: both;
}

@mixin blue-button-cta {
  @include blue-button;
  @include rem-fallback(padding, 1.7, 3, 2);
  @include rem-fallback(font-size, 2.1);
  font-weight: 300;
  clear: both;
}

@mixin cta-arrow-right {

  @include rem-fallback(padding-right, 4.2);

  &:after {
    content: "";
    display: inline-block;
    position: relative;
    @include rem-fallback(left, 1.5);
    @include rem-fallback(top, .4);
    @include use-sprite(arrow-white-right);
    transition: left .2s;
  }

  &:hover:after, &:focus:after {
    @include rem-fallback(left, 1.9);
  }

}

@mixin red-arrow-right {

  @include rem-fallback(padding-right, 4.2);
  position: relative;

  &:after {
    content: "";
    display: inline-block;
    position: absolute;
    @include rem-fallback(right, 1.9);
    @include rem-fallback(top, 3.2);
    @include use-sprite(arrow-red-right);
    transition: right .2s;
  }

  &:hover:after, &:focus:after {
    @include rem-fallback(right, 1.5);
  }

}

@mixin red-arrow-right-small {

  @include rem-fallback(padding-right, 3.2);
  position: relative;

  &:after {
    content: "";
    display: inline-block;
    position: relative;
    @include rem-fallback(left, 1.5);
    @include rem-fallback(top, .4);
    @include use-sprite(arrow-red-right-small);
    transition: left .2s;
  }

  &:hover:after, &:focus:after {
    @include rem-fallback(left, 1.9);
  }

}


@mixin red-link {
  @include rem-fallback(padding, .5, 0);
  @include rem-fallback(font-size, 1.2);
  text-transform: uppercase;
  color: $red;
  transition: all .2s;
  display: inline-block;
  clear: both;
  font-weight: 700;
  border-bottom: 1px solid transparent;

  &:hover, &:focus {
    border-color: $red;
  }
}

@mixin boldbluetext {
  font-family: $font-heading;
  font-style: normal;
  @include rem-fallback(font-size, 1.8);
  text-transform: uppercase;
  font-weight: 600;
  color: $darkblue;
  @include rem-fallback(margin-bottom, 1.5);
}

@mixin subnav-parent {
  border: 0 solid $paleblue;
  @include rem-fallback(border-bottom-width, .2);
  color: $link-color;
  @include rem-fallback(padding, 1);
  &:after {
    content: "";
    display: inline-block;
    position: relative;
    @include rem-fallback(top, .2);
    @include use-sprite(arrow-red-right-small);
    transform: rotate(0deg);
    @include rem-fallback(margin-left, 1);
    transition: all .3s;
  }
}